#!/usr/bin/env python

from __future__ import print_function
import json
import sys

try:
    from urllib.parse import urlencode #python 3
except ImportError:
    from urllib import urlencode #python 2

try:
    import urllib.request as urllib2 #python 3
except ImportError:
    import urllib2 #python 2

baseUrl = "http://yoplitein.net/qotd/json"
qotdUrl = baseUrl + "/qotd/"
idsUrl = baseUrl + "/quote/{}"
latestUrl = baseUrl + "/latest/"
randomUrl = baseUrl + "/random/"
searchUrl = baseUrl + "/search/{}"

def error(msg):
    print("Error:", msg, file=sys.stderr)
    
    raise SystemExit

def get(url):
    request = urllib2.Request(url)
    
    try:
        opened = urllib2.urlopen(request)
        
        return opened.read().decode("utf-8")
    except urllib2.HTTPError as err:
        data = err.read().decode("utf-8")
        data = json.loads(data)
        
        error(u"HTTP {} ({})".format(err.code, data["message"]))

def parse(data):
    parsed = json.loads(data)
    result = None
    
    def format(quote):
        return u"{}. {}".format(quote["id"], quote["quote"])
    
    if type(parsed) == dict:
        result = format(parsed)
    elif type(parsed) == list:
        result = "\n".join(map(lambda q: format(q), parsed))
    else:
        error("Invalid response")
    
    return result

def fetch(url):
    return parse(get(url))
    
def internet_on():
    try:
        urllib2.urlopen('http://1.1.1.1', timeout=3)
        return True
    except urllib2.URLError as err: 
        return False

def main():

    
    args = sys.argv[1:]
    
    if internet_on() == False:
        print("Not connected to the internet")
        
        return
    
    if len(args) == 0:
        print(fetch(qotdUrl))
        
        return
    
    cmd = args[0]
    
    if cmd == "latest":
        print(fetch(latestUrl))
    elif cmd == "random":
        print(fetch(randomUrl))
    elif cmd == "search":
        if len(args) == 0:
            print("Search for what?")
            
            return
        
        args = " ".join(args[1:])
        encoded = urlencode({"q": args})[2:]
        encoded = encoded.replace("+", " ")
        url = searchUrl.format(encoded)
        response = fetch(url)
        
        if sys.version_info.major == 2:
            response = response.encode("utf-8")
        
        print(response)
    else:
        for index, arg in enumerate(args):
            try:
                int(arg)
            except ValueError as err:
                if index == 0:
                    print("Don't know how to", cmd)
                    
                    return
                else:
                    error(str(err))
        
        print(fetch(idsUrl.format(",".join(args))))

if __name__ == '__main__':
    main()
